py-squaremap-combiner 
======================

|Python 3.12|

Python script written to combine the images generated by the
`squaremap <https://modrinth.com/plugin/squaremap>`__ Minecraft plugin.
Not affiliated with squaremap or its authors.

The seed used for the world the sample images were created from is
``-2590089827693666277``.

Until I release version 1.0.0 I do not consider this project stable —
there are bound to be a number of bugs or quirks that I haven’t
discovered and/or fixed yet, and the code will likely be seeing
frequently large changes until that point. Right now version bumps are
made subjectively and each bump just increases the minor version, but
after 1.0.0 I plan to stick to semantic versioning.

Contents
-----

- `Usage <#usage>`__
- `Options <#options>`__

Usage
-----

Install the package with pip (``pip install git+https://github.com/svioletg/py-squaremap-combiner.git``).
It can then be used either as a module in another project...

.. code:: python

   from squaremap_combine.combine_core import Combiner

   combiner = Combiner('my-tiles')
   map_image = combiner.combine('minecraft_overworld', 2)
   map_image.save('output.jpg')

…or run via the ``-m`` switch.

.. code:: bash

   python3 -m squaremap_combine my-tiles overworld 2 --output_ext jpg

Use the ``-h`` or ``--help`` argument to see full arguments and their
defaults.

Installing this repository as a package is only a convenience feature.
If you don't want to install it, this package only really contains a
single script, so you can download it and use it on its own, provided
you have the required packages installed. The script can be found in
this repository at ``src/squaremap_combine/squaremap_combine.py``.

To find squaremap's tiles, go to the folder your server JAR is in, and
then navigate to ``plugins/squaremap/web``. Inside, there will be a
``tiles`` folder which likely contains folders like
``minecraft_overworld``, ``minecraft_the_nether``, and
``minecraft_the_end``. You will supply the path to this ``tiles`` folder
for the script to work, and then specify a "world" (dimension) to use
the tiles of, which will be one of the three aformentioned subfolders -
the ``minecraft_`` prefix can be omitted when entering them, but you
should not alter the folder names themselves.

After these two, specify what detail level to use, any number from 0
through 3. Level 3 is the highest detail and thus will result in the
largest image, while 0 is the lowest detail and results in the smallest.

====== ========================
Detail Description
====== ========================
3      1 block per pixel
2      2x2 block area per pixel
1      4x4 block area per pixel
0      8x8 block area per pixel
====== ========================

This is all you need to create a basic full-map image. Your command
might look something like this:

.. code:: bash

   python3 squaremap_combine.py server-tiles overworld 3

Note that very large maps can of course easily result in very large
images, and it may take a while for the full image to be completed.

Beyond this, there are various options that can be given to the script
to alter its behavior. If you're not familiar with using the
command-line, these options are typed out after the main command, in any
order, with their associated values following directly after, like
``squaremap_combine tiles overworld 3 --option value --option-two value``.
If any of the options below are not used, their **default** is used
automatically.

Options
-------

   Note: You can use either hyphens (``-``) or underscores (``_``) and
   the option will work the same, e.g. ``--output-ext`` or
   ``--output_ext``

-o, --output-dir PATH
   Directory to save the completed image to. Defaults to the directory in which this script was run.

-ext, --output-ext EXTENSION
   The output file extension (format) to use for the created image. Default is ``png``.

-t, --timestamp FORMAT_STRING
   Adds a timestamp of the given format to the beginning of the image file name. Default format ``?Y-?m-?d_?H-?M-?S`` will
   be used if no format is specified after this argument. See: https://docs.python.org/3/library/datetime.html#format-codes
   for formatting string examples.

   NOTE: Due to a quirk with the argparse library, you must use a question mark (?) instead of a percent symbol for any format strings.

-ow, --overwrite
   Using this flag will allow the script to overwrite an existing file with the same target name if it already exists. By default, if an image with the same path already exists, a numbered suffix is added.

-a, --area <X1 Y1 X2 Y2>
   A rectangle area of the world (top, left, bottom, right) to export an image from. This can save time when using a very large world map, as this will only combine the minimum amount of regions needed to cover this area, before finally cropping it down to only the given area. These values should be the coordinates of the area as they would be in the actual Minecraft world.

--no-autotrim
   By default, excess empty space is trimmed off of the final image. Using this argument with disable that behavior.

   NOTE: Autotrimming is automatically disabled if ``--force-size`` or ``--area`` are used.

-fs, --force-size <WIDTH [HEIGHT]>
   Centers the assembled map inside an image of this size. Can be used to make images a consistent size if you're using them for a timelapse, for example. Only specifying one integer for this argument will use the same value for both width and height.

-g, --grid-interval <X_INTERVAL [Y_INTERVAL]>
   Defines the coordinate intervals to be used for any grid-based options.
   Grid is drawn relative to the coordinates of the Minecraft world being mapped.
   If only ``X_INTERVAL`` is given, the same value is used for ``Y_INTERVAL``.

-gcf, --coords-format
   A string to format how grid coordinates appear. Use "{x}" and "{y}" (curly-braces included) where you want the X and Y coordinates to appear, e.g. "``X: {x} Y: {y}``" could appear as "``X: 100 Y: 200``".

-bg, --background COLOR
   Specify an color to use for the background of the image. Empty space is fully transparent by default. Accepted color formats are hexcode (e.g. ``FF0000``) or a set of RGB values (e.g. ``255 0 0``), and an extra hex code byte (e.g. ``FF0000FF`` or integer value (e.g. ``255 0 0 255``) can be added to determine the alpha of the color.

-sf, --style-file
   A set of styling rules for the combiner, in the form of a path to a JSON file.
   The values set in this JSON file will override that of the default styling settings, and can then be overridden themselves
   by any values present in the JSON given for the --style-override argument, if it is present.

-so, --style-override
   A set of styling rules for the combiner, in the form of a JSON-formatted string.
   These values take highest priority on overriding the already set rules.

-y, --yes-to-all
   Automatically accepts any requests for user confirmation.

Using some of these options, your command may look something like this:

.. code:: bash

   python3 -m squaremap_combine tiles overworld 3 --area -700 -500 100 200 --timestamp default --output-dir town-area --output-ext jpg -y

.. |Python 3.12| image:: https://img.shields.io/badge/python-3.12-blue.svg
   :target: https://www.python.org/downloads/release/python-3120/
